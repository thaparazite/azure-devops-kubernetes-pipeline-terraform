trigger:
- main

pool:
  vmImage: ubuntu-latest

variables:
  tf_rg: 'terraform-backend-rg'
  tf_location: 'westeurope'
  tf_sa: 'storageaccountskety'
  tf_container: 'storageaccountsketycontainer'

steps:
- script: echo K8S Terraform Azure!
  displayName: 'Run a one-line script'

- task: DownloadSecureFile@1
  name: publicKey
  inputs:
    secureFile: 'azure_rsa.pub'

- script: |
    # Install jq for JSON parsing
    sudo apt-get update && sudo apt-get install -y jq
    
    # Get latest Terraform version from HashiCorp releases JSON
    LATEST=$(curl -s https://releases.hashicorp.com/terraform/index.json | jq -r '.versions | keys[]' | sort -Vr | head -n1)
    echo "Latest Terraform version: $LATEST"
    
    # Download latest Linux amd64 zip
    curl -fsSL https://releases.hashicorp.com/terraform/${LATEST}/terraform_${LATEST}_linux_amd64.zip -o terraform.zip
    
    # Unzip and move to /usr/local/bin
    unzip terraform.zip
    sudo mv terraform /usr/local/bin/
    
    # Verify installation
    terraform version
  displayName: 'Install Latest Terraform'



# âœ… Now the CLI task will work
# - task: TerraformCLI@2
#   inputs:
#     command: 'init'
#     workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/iaac/azure/kubernetes'
#     commandOptions: '-var client_id=$(client_id) -var client_secret=$(client_secret) -var ssh_public_key=$(publicKey.secureFilePath)'
#     backendType: 'azurerm'
#     backendServiceArm: 'azure-resource-management-service-connection'
#     ensureBackend: true
#     backendAzureRmResourceGroupName: 'terraform-backend-rg'
#     backendAzureRmResourceGroupLocation: 'westeurope'
#     backendAzureRmStorageAccountName: 'storageaccountskety'
#     backendAzureRmContainerName: 'storageaccountsketycontainer'
#     backendAzureRmKey: 'kubernetes-dev.tfstate'
#     allowTelemetryCollection: true



- script: |
    # Create resource group if not exists
    az group create --name $(tf_rg) --location $(tf_location)

    # Create storage account only if it doesn't exist
    az storage account show --name $(tf_sa) --resource-group $(tf_rg) || \
      az storage account create --name $(tf_sa) --resource-group $(tf_rg) --location $(tf_location) --sku Standard_LRS

    # Create container if it doesn't exist
    az storage container create --name $(tf_container) --account-name $(tf_sa) || true
  displayName: 'Ensure Terraform backend storage exists'

